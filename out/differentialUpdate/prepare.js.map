{"version":3,"sources":["../../src/differentialUpdate/prepare.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAA,MAAA,GAAA,OAAA,CAAA,MAAA,CAAA;;AACA,IAAA,OAAA,GAAA,OAAA,CAAA,UAAA,CAAA;;AACA,IAAA,KAAA,GAAA,OAAA,CAAA,KAAA,CAAA;;AAEO,IAAM,gBAAgB,GAAG,UAAC,GAAD,EAAY;AAC1C,SAAO,IAAI,OAAJ,CAAY,UAAC,OAAD,EAAU,MAAV,EAAgB;AACjC,IAAA,OAAA,CAAA,MAAA,CAAM,GAAN,CAAU,GAAV,EAAe,UAAO,IAAP,EAAoB,QAApB,EAA4B;AAAA,aAAA,SAAA,CAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,YAAA;;;;;AACzC,kBAAI,IAAJ,EAAU;AACR,sBAAM,IAAI,KAAJ,CAAU,IAAI,CAAC,OAAf,CAAN;AACD;;AACD,kBAAI,QAAJ,EAAc;AACZ,gBAAA,OAAO,CAAC,GAAR,CAAY,QAAZ;AACA,gBAAA,OAAO,CAAC,IAAI,CAAC,KAAL,CAAW,QAAX,CAAD,CAAP;AACD;;;;;;;AAEqB,qBAAA,CAAA;AAAA;AAAA,gBAAM,KAAA,CAAA,OAAA,CAAI,GAAJ,CAAN,CAAA;;;AAAZ,cAAA,OAAO,GAAK,EAAA,CAAA,IAAA,EAAA,CAAL,OAAP;;AAER,kBAAI,OAAO,IAAI,IAAX,IAAmB,OAAO,CAAC,MAAR,KAAmB,CAA1C,EAA6C;AAC3C,sBAAM,IAAI,KAAJ,CAAU,gBAAa,GAAb,GAAgB,aAA1B,CAAN;AACD;;AAED,cAAA,OAAA,CAAA,MAAA,CAAM,GAAN,CAAU,GAAV,EAAe,MAAA,CAAA,UAAA,CAAW,OAAX,EAAoB,QAApB,EAAf;AACA,cAAA,OAAO,CAAC,IAAI,CAAC,KAAL,CAAW,MAAA,CAAA,UAAA,CAAW,OAAX,EAAoB,QAApB,EAAX,CAAD,CAAP;;;;;;;AAEA,cAAA,OAAO,CAAC,KAAR,CAAc,GAAd;;;;;;;;;;;OAlBuC,CAAA;AAoB1C,KApBD;AAqBD,GAtBM,CAAP;AAuBD,CAxBM;;AAAM,OAAA,CAAA,gBAAA,GAAgB,gBAAhB,C","sourcesContent":["import { gunzipSync } from \"zlib\";\nimport { client as redis } from \"../redis\";\nimport got from \"got\";\n\nexport const downloadBlockMap = (url: string) => {\n  return new Promise((resolve, reject) => {\n    redis.get(url, async (_err: Error, blockmap) => {\n      if (_err) {\n        throw new Error(_err.message);\n      }\n      if (blockmap) {\n        console.log(blockmap);\n        resolve(JSON.parse(blockmap));\n      }\n      try {\n        const { rawBody } = await got(url);\n\n        if (rawBody == null || rawBody.length === 0) {\n          throw new Error(`Blockmap \"${url}\" is empty`);\n        }\n\n        redis.set(url, gunzipSync(rawBody).toString());\n        resolve(JSON.parse(gunzipSync(rawBody).toString()));\n      } catch (e) {\n        console.error(e);\n      }\n    });\n  });\n};\n"],"sourceRoot":""}
