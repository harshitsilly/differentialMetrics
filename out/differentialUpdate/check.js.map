{"version":3,"sources":["../../src/differentialUpdate/check.ts"],"names":[],"mappings":"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","sourcesContent":["// import { Logger } from \"../main\"\n\ninterface FileChunks {\n  checksums: Array<string>;\n  sizes: Array<number>;\n}\n\n// interface BlockMap {\n//   version: \"1\" | \"2\";\n//   files: Array<BlockMapFile>;\n// }\n\ninterface BlockMapFile extends FileChunks {\n  name: string;\n  offset: number;\n}\n\nexport enum OperationKind {\n  COPY,\n  DOWNLOAD\n}\n\nexport interface Operation {\n  kind: OperationKind;\n\n  // inclusive\n  start: number;\n  // exclusive\n  end: number;\n\n  // debug only\n  // oldBlocks: Array<string> | null\n}\n\nexport function computeOperations(\n  oldBlockMap,\n  newBlockMap,\n  logger: Console\n): Array<Operation> {\n  const nameToOldBlocks = buildBlockFileMap(oldBlockMap.files);\n  const nameToNewBlocks = buildBlockFileMap(newBlockMap.files);\n\n  let lastOperation: Operation | null = null;\n\n  // for now only one file is supported in block map\n  const blockMapFile = newBlockMap.files[0];\n  const operations: Array<Operation> = [];\n  const name = blockMapFile.name;\n  const oldEntry = nameToOldBlocks.get(name);\n  if (oldEntry == null) {\n    // new file (unrealistic case for now, because in any case both blockmap contain the only file named as \"file\")\n    throw new Error(`no file ${name} in old blockmap`);\n  }\n\n  const newFile = nameToNewBlocks.get(name)!!;\n  let changedBlockCount = 0;\n\n  const {\n    checksumToOffset: checksumToOldOffset,\n    checksumToOldSize\n  } = buildChecksumMap(nameToOldBlocks.get(name)!!, oldEntry.offset, logger);\n\n  let newOffset = blockMapFile.offset;\n  for (\n    let i = 0;\n    i < newFile.checksums.length;\n    newOffset += newFile.sizes[i], i++\n  ) {\n    const blockSize = newFile.sizes[i];\n    const checksum = newFile.checksums[i];\n    let oldOffset = checksumToOldOffset.get(checksum);\n    if (oldOffset != null && checksumToOldSize.get(checksum) !== blockSize) {\n      logger.warn(\n        `Checksum (\"${checksum}\") matches, but size differs (old: ${checksumToOldSize.get(\n          checksum\n        )}, new: ${blockSize})`\n      );\n      oldOffset = undefined;\n    }\n\n    if (oldOffset === undefined) {\n      // download data from new file\n      changedBlockCount++;\n\n      if (\n        lastOperation != null &&\n        lastOperation.kind === OperationKind.DOWNLOAD &&\n        lastOperation.end === newOffset\n      ) {\n        lastOperation.end += blockSize;\n      } else {\n        lastOperation = {\n          kind: OperationKind.DOWNLOAD,\n          start: newOffset,\n          end: newOffset + blockSize\n          // oldBlocks: null,\n        };\n        validateAndAdd(lastOperation, operations, checksum, i);\n      }\n    } else {\n      // reuse data from old file\n      if (\n        lastOperation != null &&\n        lastOperation.kind === OperationKind.COPY &&\n        lastOperation.end === oldOffset\n      ) {\n        lastOperation.end += blockSize;\n        // lastOperation.oldBlocks!!.push(checksum)\n      } else {\n        lastOperation = {\n          kind: OperationKind.COPY,\n          start: oldOffset,\n          end: oldOffset + blockSize\n          // oldBlocks: [checksum]\n        };\n        validateAndAdd(lastOperation, operations, checksum, i);\n      }\n    }\n  }\n\n  if (changedBlockCount > 0) {\n    logger.info(\n      `File${\n        blockMapFile.name === \"file\" ? \"\" : \" \" + blockMapFile.name\n      } has ${changedBlockCount} changed blocks`\n    );\n  }\n  return operations;\n}\n\nfunction validateAndAdd(\n  operation: Operation,\n  operations: Array<Operation>,\n  checksum: string,\n  index: number\n): void {\n  if (operations.length !== 0) {\n    const lastOperation = operations[operations.length - 1];\n    if (\n      lastOperation.kind === operation.kind &&\n      operation.start < lastOperation.end &&\n      operation.start > lastOperation.start\n    ) {\n      const min = [\n        lastOperation.start,\n        lastOperation.end,\n        operation.start,\n        operation.end\n      ].reduce((p, v) => (p < v ? p : v));\n      throw new Error(\n        `operation (block index: ${index}, checksum: ${checksum}, kind: ${\n          OperationKind[operation.kind]\n        }) overlaps previous operation (checksum: ${checksum}):\\n` +\n          `abs: ${lastOperation.start} until ${lastOperation.end} and ${operation.start} until ${operation.end}\\n` +\n          `rel: ${lastOperation.start - min} until ${lastOperation.end -\n            min} and ${operation.start - min} until ${operation.end - min}`\n      );\n    }\n  }\n  operations.push(operation);\n}\n\n// eslint-disable-next-line @typescript-eslint/explicit-function-return-type\nfunction buildChecksumMap(\n  file: BlockMapFile,\n  fileOffset: number,\n  logger: { debug: any }\n) {\n  const checksumToOffset = new Map<string, number>();\n  const checksumToSize = new Map<string, number>();\n  let offset = fileOffset;\n  const debugLog = logger.debug;\n  for (let i = 0; i < file.checksums.length; i++) {\n    const checksum = file.checksums[i];\n    const size = file.sizes[i];\n\n    const existing = checksumToSize.get(checksum);\n    if (existing === undefined) {\n      checksumToOffset.set(checksum, offset);\n      checksumToSize.set(checksum, size);\n    } else if (debugLog != null) {\n      const sizeExplanation =\n        existing === size\n          ? \"(same size)\"\n          : `(size: ${existing}, this size: ${size})`;\n      debugLog(\n        `${checksum} duplicated in blockmap ${sizeExplanation}, it doesn't lead to broken differential downloader, just corresponding block will be skipped)`\n      );\n    }\n    offset += size;\n  }\n  return { checksumToOffset, checksumToOldSize: checksumToSize };\n}\n\nfunction buildBlockFileMap(\n  list: Array<BlockMapFile>\n): Map<string, BlockMapFile> {\n  const result = new Map<string, BlockMapFile>();\n  for (const item of list) {\n    result.set(item.name, item);\n  }\n  return result;\n}\n"],"sourceRoot":""}
