{"version":3,"sources":["../../src/elasticSearch/updater.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAA,cAAA,GAAA,OAAA,CAAA,gBAAA,CAAA;;AACA,IAAA,YAAA,GAAA,OAAA,CAAA,cAAA,CAAA;;AACA,IAAA,OAAA,GAAA,OAAA,CAAA,UAAA,CAAA,C,CACA;;;AACQ,IAAA,OAAO,GAAK,OAAO,CAAC,GAAR,CAAL,OAAP;AAER,YAAA,CAAA,MAAA,CAAQ,OAAR,CAAgB,MAAhB,CAAuB,EAAvB,EAA2B,UAAC,IAAD,EAAO,IAAP,EAAW;AACpC,EAAA,OAAO,CAAC,GAAR,CAAY,IAAZ;AACD,CAFD;AAGA,IAAM,WAAW,GAAG,IAAI,cAAA,CAAA,OAAJ,CAAiB,QAAjB,CAApB;;AACA,SAAsB,QAAtB,GAA8B;;;;;;;;;AAC5B,UAAA,EAAA,GAAA,WAAW,CAAC,WAAZ,EAAA;mBAAA,OAAA,CAAA;AAAA;AAAA,YAAA,CAAA,CAAA;AAA8B,iBAAA,CAAA;AAAA;AAAA,YAAM,WAAW,CAAC,WAAZ,EAAN,CAAA;;;AAAD,UAAA,EAAA,GAAC,EAAA,CAAA,IAAA,EAAD;;;;AAA7B,UAAA,EAAA;AACA,UAAA,WAAW,CAAC,WAAZ;AACA,iBAAA,CAAA;AAAA;AAAA,YAAM,IAAI,OAAJ,CAAY,UAAC,OAAD,EAAU,MAAV,EAAgB;AAChC,YAAA,OAAA,CAAA,MAAA,CAAO,GAAP,CAAW,QAAX,EAAqB,UAAO,IAAP,EAAoB,MAApB,EAA0B;AAAA,qBAAA,SAAA,CAAA,KAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,YAAA;;;;AAC7C,sBAAI,IAAJ,EAAU;AACR,2BAAA,CAAA;AAAA;AAAA,qBAAA;AACA,oBAAA,MAAM,CAAC,iBAAD,CAAN;AACD;;AACD,sBAAI;AACF,wBAAI,MAAJ,EAAY;AACV,sBAAA,MAAM,GAAG,IAAI,CAAC,KAAL,CAAW,MAAX,EAAmB,gBAAnB,CAAoC,QAA7C;;AACA,2BAAA,EAAA,GAAA,CAAA,EAAkB,QAAA,GAAA,MAAlB,EAAkB,EAAA,GAAA,QAAA,CAAA,MAAlB,EAAkB,EAAA,EAAlB,EAA0B;AAAf,wBAAA,GAAG,GAAA,QAAA,CAAA,EAAA,CAAH;AACT,wBAAA,OAAO,CAAC,GAAR,CAAY,GAAZ;AACA,wBAAA,WAAW,CAAC,WAAZ,CAAwB,IAAxB,EAA8B,OAA9B,EAAuC,IAAI,CAAC,SAAL,CAAe,GAAf,CAAvC;AACD;AACF;;AACD,oBAAA,OAAO,CAAC,eAAD,CAAP;AACD,mBATD,CAUA,OAAO,KAAP,EAAc;AACZ,oBAAA,OAAO,CAAC,GAAR,CAAY,KAAZ;AACC,oBAAA,OAAO,CAAC,KAAD,CAAP;AACF;;;;;;eAlB4C,CAAA;AAmB9C,aAnBD;AAuBD,WAxBK,CAAN,CAAA;;;AAAA,UAAA,EAAA,CAAA,IAAA;;;;;;;;AAyBD;;AA5BD,OAAA,CAAA,QAAA,GAAA,QAAA;;AA6BA,SAAsB,mBAAtB,CAA0C,EAA1C,EAA8C,KAA9C,EAA0D;;;AAAZ,MAAA,KAAA,KAAA,KAAA,CAAA,EAAA;AAAA,IAAA,KAAA,GAAA,IAAA;AAAY;;;;;;;AACvC,iBAAA,CAAA;AAAA;AAAA,YAAM,YAAA,CAAA,MAAA,CAAQ,MAAR,CAAe;AACpC,YAAA,KAAK,EAAE,QAD6B;AAEpC,YAAA,IAAI,EAAE;AACJ,cAAA,IAAI,EAAE,CAAC,QAAD,EAAW;AAAE,gBAAA,YAAY,EAAE;AAAhB,eAAX,CADF;AAEJ,cAAA,KAAK,EAAE;AACL,gBAAA,KAAK,EAAE;AACL,kBAAA,GAAG,EAAE;AADA;AADF;AAFH,aAF8B;AAUpC,YAAA,IAAI,EAAE;AAV8B,WAAf,CAAN,CAAA;;;AAAX,UAAA,QAAQ,GAAG,EAAA,CAAA,IAAA,EAAX;AAYN,UAAA,OAAO,CAAC,GAAR,CAAY,QAAZ;AACA,iBAAA,CAAA;AAAA;AAAA,YAAA,CAAA,EAAA,GAAA,CAAA,EAAA,GAAA,CAAA,EAAA,GAAO,QAAQ,KAAA,IAAR,IAAA,QAAQ,KAAA,KAAA,CAAR,GAAQ,KAAA,CAAR,GAAA,QAAQ,CAAE,IAAjB,MAAqB,IAArB,IAAqB,EAAA,KAAA,KAAA,CAArB,GAAqB,KAAA,CAArB,GAAqB,EAAA,CAAE,IAAvB,MAA2B,IAA3B,IAA2B,EAAA,KAAA,KAAA,CAA3B,GAA2B,KAAA,CAA3B,GAA2B,EAAA,CAAE,IAA7B,MAAiC,IAAjC,IAAiC,EAAA,KAAA,KAAA,CAAjC,GAAiC,KAAA,CAAjC,GAAiC,EAAA,CAAE,GAAF,CAAM,UAAC,EAAD,EAAY;gBAAT,OAAO,GAAA,EAAA,CAAA,O;AAAO,mBAAA,OAAO,CAAC,YAAR;AAAoB,WAA3C,EAA6C,CAA7C,CAAjC,CAAA;;;;AACD;;AAfD,OAAA,CAAA,mBAAA,GAAA,mBAAA;;AAiBA,SAAsB,eAAtB,CAAsC,GAAtC,EAA2C,KAA3C,EAAyD,WAAzD,EAAqE;AAA1B,MAAA,KAAA,KAAA,KAAA,CAAA,EAAA;AAAA,IAAA,KAAA,GAAA,IAAA;AAAY;;;;;;;AAC/C,UAAA,YAAY,GAAG,KAAK,GACtB,2BADsB,GAEtB,4BAFE;AAGF,UAAA,eAAe,GAAG,GAAG,KAAK,MAAR,GAAiB,OAAjB,GAA8B,OAAO,GAAA,GAAP,GAAW,GAA3D;AACJ,UAAA,eAAe,GAAM,eAAe,GAAA,GAAf,GAAmB,YAAxC;AACiB,iBAAA,CAAA;AAAA;AAAA,YAAM,YAAA,CAAA,MAAA,CAAQ,MAAR,CAAe;AACpC,YAAA,KAAK,EAAE,QAD6B;AAEpC,YAAA,IAAI,EAAE;AACJ,cAAA,IAAI,EAAE,CAAC,QAAD,EAAW;AAAE,gBAAA,YAAY,EAAE;AAAhB,eAAX,CADF;AAEJ,cAAA,KAAK,EAAE;AACL,gBAAA,IAAI,EAAE;AACJ,kBAAA,IAAI,EAAE,CACJ;AACE,oBAAA,KAAK,EAAE;AACL,sBAAA,GAAG,EAAK,GAAG,GAAA,GAAH,GAAO;AADV;AADT,mBADI,CADF;AAQJ,kBAAA,MAAM,EAAE,CAAC;AAAE,oBAAA,KAAK,EAAE;AAAE,sBAAA,YAAY,EAAE;AAAE,wBAAA,GAAG,EAAE;AAAP;AAAhB;AAAT,mBAAD;AARJ;AADD;AAFH,aAF8B;AAiBpC,YAAA,IAAI,EAAE;AAjB8B,WAAf,CAAN,CAAA;;;AAAX,UAAA,QAAQ,GAAG,EAAA,CAAA,IAAA,EAAX,C,CAoBN;;AACA,iBAAA,CAAA;AAAA;AAAA,YAAO,QAAQ,CAAC,IAAT,CAAc,IAAd,CAAmB,IAAnB,CAAwB,GAAxB,CAA4B,UAAC,EAAD,EAAY;gBAAT,OAAO,GAAA,EAAA,CAAA,O;AAAO,mBAAA,OAAO,CAAC,GAAR;AAAW,WAAxD,CAAP,CAAA;;;;AACD;;AA5BD,OAAA,CAAA,eAAA,GAAA,eAAA,C","sourcesContent":["import IndexManager from \"./indexManager\";\nimport { client as elastic } from \"./connection\";\nimport { client } from \"../redis\";\n// import { writeFileSync } from \"fs\";\nconst { appName } = process.env;\n\nelastic.cluster.health({}, (_err, resp) => {\n  console.log(resp);\n});\nconst indexManger = new IndexManager(\"update\");\nexport async function indexing() {\n  indexManger.indexExists() && (await indexManger.deleteIndex());\n  indexManger.createIndex();\n  await new Promise((resolve, reject) => {\n    client.get(\"s3Data\", async (_err: Error, s3Data) => {\n      if (_err) {\n        return;\n        reject(\"indexing failed\");\n      }\n      try {\n        if (s3Data) {\n          s3Data = JSON.parse(s3Data).ListBucketResult.Contents;\n          for (const doc of s3Data) {\n            console.log(doc);\n            indexManger.addDocument(null, \"posts\", JSON.stringify(doc));\n          }\n        }\n        resolve(\"indexing done\");\n      }\n      catch (error) {\n        console.log(error);\n         resolve(error);\n      }\n    });\n   \n\n   \n  });\n}\nexport async function getLastModifiedTime(to, isMac = true) {\n  const response = await elastic.search({\n    index: \"update\",\n    body: {\n      sort: [\"_score\", { LastModified: \"desc\" }],\n      query: {\n        match: {\n          Key: to\n        }\n      }\n    },\n    size: 1\n  });\n  console.log(response);\n  return response?.body?.hits?.hits?.map(({ _source }) => _source.LastModified)[0];\n}\n\nexport async function getLast5Version(env, isMac = true, versionTime?) {\n  const appExtension = isMac\n    ? \"-0.0.0-0-mac.zip.blockmap\"\n    : \"Setup 0.0.0-0.exe.blockmap\";\n  let appModifiedName = env === \"beta\" ? appName : `${appName}_${env}`;\n  appModifiedName = `${appModifiedName} ${appExtension}`;\n  const response = await elastic.search({\n    index: \"update\",\n    body: {\n      sort: [\"_score\", { LastModified: \"desc\" }],\n      query: {\n        bool: {\n          must: [\n            {\n              match: {\n                Key: `${env}/${appModifiedName}`\n              }\n            }\n          ],\n          filter: [{ range: { LastModified: { lte: versionTime } } }]\n        }\n      }\n    },\n    size: 5\n  });\n\n  // return response;\n  return response.body.hits.hits.map(({ _source }) => _source.Key);\n}\n"],"sourceRoot":""}
